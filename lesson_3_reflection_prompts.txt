When would you want to use a remote repository rather than keeping all your work local?

 This would be useful when working from more than one location, in order to keep changes
 between workstations in sync, when more than one person is working on the same project,
 or when backing up data offsite is desireable.

 Why might you want to always pull changes manually rather than having Git automatically 
 stay up-to-date with your remote repository?

 If there are other collaborators working on the code, an auto pull may break some of the
 functionality I'm relying on to make the changes I'm working on. On the other hand, if
 I manually pull, I can ensure that there are no conflicts by engagin in conflict resolution
 on my own.

 Describe the differences between forks, clones, and branches. When would you use one instead of another?

  A fork is when you clone code from a GitHub repository into your own user area in GitHub.
  This is useful when you want to start working on a project someone else has started, but 
  want to take it in your own direction.

  A clone is a direct and exact copy of a repository into another repository. This is
  used when you want to work on the code from a location other than the original machine
  the data is stored on, or if you want to create a new project off of the backbone of the
  contents of the repository being cloned.

  A branch is when you deviate from code in your own repository for the purposes of anything
  from adding new funtionality while maintaining a working copy, performing localization, or
  just testing new features.

  What is the benefit of having a copy of the last known state of the remote stored locally?

   The benefit of keeping the last known state of the remote local to the machine is that
   when you are ready to commit back to the remote, you are less likely to run into 
   commit conflicts at that point, and have most, if not all such conflicts resolved 
   beforehand.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

  I would have a hell of a time collaborating without Git. I don't even want to think about the 
  pain it would be having to diff each and every file endlessly and fix the errors manually.
  That is why the pioneers of CS created this sort of thing in the first place!

When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?

 The benefit of creating a separate branch is that the new branch can break, without 
 affecting the quality of the main branch. This is good for adding experimental functions
 to a program to ensure the new ideas don't break a project. 

 Also, making a different version of the same code, as shown in the easy-mode example of
 Asteroids, or the Italian translations from earlier lessons, shows that maintaining several
 branches of different code branches is often a good idea as well.

 Making changes directly to master would be beneficial is the only changes is pure bug killing.
 If all you are doing is fixing a piece of code, there is no reason to maintain it as a separate 
 project branches.

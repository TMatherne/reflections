What happens when you initialize a repository? Why do you need to do it?

 When you init a repo, git sets up metadata in the folder, readying git to
 track the files within that folder, but not yet doing anything until it 
 is told. To add files to git tracking, you need to manually add files to the repo.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

 The staging area allows you to see what changes are waiting to be written
 into the repo. This is different from the working directory, as the wd includes
 all the files within it, while the staging area only includes those tracked by 
 git that are waiting to be written into the active repo.

 The value in this is that it allows you to keep track of how many changes you've
 made, and choose when to create commits before things get out of hand in size.

How can you use the staging area to make sure you have one commit per logical
change?

 By comparing the git diff you know the staging area compared to changes. 
 By compareing git diff --staged, you know changes currently staged compared
 to the latest commit. 
 By doing these judiciously, you can ensure that you are committing only one
 change per commit, no matter how much work you've completed previous to that
 commit. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

 When you want to add functionality to a test branch, but maintain a usable 
 branch, when you want to change something, like a language, or otherwise do 
 something to the code while still keeping the main structure of the code 
 intact.

 Branches help by making it easy to see the differences in the code structure 
 while also keeping the main branch stable and usable.

How do the diagrams help you visualize the branch structure?

 They assist in making it clear where branches diverge, how branches
 keep track of changes to separate code, and when unreachable commits happened.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

 Merging two branches together results in the branches joining under the
 name of the branch active when the command was executed. The commit histories
 being commingled according to timestamp. 
 It is represented in the diagram as it is because the histories become
 tied together and the parent/child relationships are retained.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

 The pros of automatic merging is that when there are no potential conflicts,
 merges happen without having to waste time looking over and verifying that each
 needed merge is going to happen according to plan. The only time merges need
 to be manually verified is when there are potential for code overlap.
 The cons to doing this, is that sometimes, some potential overlaps may be missed
 by the algorithm, resulting in unintentional bugs.
